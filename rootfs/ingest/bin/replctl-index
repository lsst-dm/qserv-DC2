#!/usr/bin/env python

# LSST Data Management System
# Copyright 2014-2015 AURA/LSST.
#
# This product includes software developed by the
# LSST Project (http://www.lsst.org/).
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the LSST License Statement and
# the GNU General Public License along with this program.  If not,
# see <http://www.lsstcorp.org/LegalNotices/>.

"""
Index table columns using replication service to Qserv

@author  Fabrice Jammes, IN2P3
"""

# -------------------------------
#  Imports of standard modules --
# -------------------------------
import argparse
import logging

# ----------------------------
# Imports for other modules --
# ----------------------------
import qserv.ingest as ingest
import qserv.util as util

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description="Create Qserv indexes (tables or secondary) "
                                     "using Qserv replication service")
    parser.add_argument("data_url", type=str, help="Input data/metadata URL",
                        action=util.BaseUrlAction)
    parser.add_argument("repl_url", type=str,
                        help="Replication controller root URL",
                        action=util.BaseUrlAction)
    parser.add_argument("--secondary", "-s", action="store_true",
                        help="Create secondary index, and do not index tables")
    parser.add_argument("--verbose", "-v", action="store_true",
                        help="Use debug logging")
    args = parser.parse_args()

    logger = logging.getLogger()
    if args.verbose:
        logger.setLevel(logging.DEBUG)
    else:
        logger.setLevel(logging.INFO)
    logger.addHandler(logging.StreamHandler())

    ingester = ingest.Ingester(args.data_url, args.repl_url)
    if args.secondary:
        ingester.build_secondary_index()
    else:
        ingester.index_all_tables()
