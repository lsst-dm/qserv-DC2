#!/usr/bin/env python

# LSST Data Management System
# Copyright 2014-2015 AURA/LSST.
#
# This product includes software developed by the
# LSST Project (http://www.lsst.org/).
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the LSST License Statement and
# the GNU General Public License along with this program.  If not,
# see <http://www.lsstcorp.org/LegalNotices/>.

"""
Register database and table inside replication service

@author  Fabrice Jammes, IN2P3
"""

# -------------------------------
#  Imports of standard modules --
# -------------------------------
import argparse
import logging

# ----------------------------
# Imports for other modules --
# ----------------------------
import qserv.http as http
import qserv.util as util
from qserv.metadata import ChunkMetadata
import urllib

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description="Initialize database and "
                                     "table inside Qserv replication service")

    parser.add_argument("url", type=str,
                        help="Replication web service base URL",
                        action=util.BaseUrlAction)
    parser.add_argument("data_url", type=str, help="Input data URL",
                        action=util.BaseUrlAction)
    parser.add_argument("--felis", type=str,
                        help=" A Felis schema file containing the table schema",
                        action=util.FelisAction)
    parser.add_argument("--verbose", "-v", action="store_true",
                        help="Use debug logging")
    args = parser.parse_args()

    logger = logging.getLogger()
    if args.verbose:
        logger.setLevel(logging.DEBUG)
    else:
        logger.setLevel(logging.INFO)
    logger.addHandler(logging.StreamHandler())

    logger.debug("Loading metadata")
    metadata = ChunkMetadata(args.data_url)

    path = "/ingest/database/"
    url = urllib.parse.urljoin(args.url, path)
    json = metadata.json_db
    logger.debug("Starting a database registration request: %s with %s",
                 url, json)

    http_session = http.Http()

    http_session.post(url, json)

    if args.felis:
        logger.info("Loaded Felis schema for tables %s", args.felis.keys())

    path = "/ingest/table/"
    url = urllib.parse.urljoin(args.url, path)

    for json_data in metadata.get_tables_json():
        if args.felis is not None and json_data["table"] in args.felis:
            schema = args.felis[json_data["table"]]
            json_data["schema"] = schema + json_data["schema"]
        logger.debug("Starting a table registration request: %s with %s",
                     url, json_data)
        http_session.post(url, json_data)

    path = "/ingest/config/"
    url = urllib.parse.urljoin(args.url, path)
    json = {"database": metadata.database,
            "CAINFO": "/etc/pki/tls/certs/ca-bundle.crt",
            "SSL_VERIFYPEER": 0
           }

    logger.debug("Configuring ingest parameters: %s with %s", url, json)
    http_session.put(url, json)
