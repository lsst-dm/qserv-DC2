#!/usr/bin/env python

# LSST Data Management System
# Copyright 2014-2015 AURA/LSST.
#
# This product includes software developed by the
# LSST Project (http://www.lsst.org/).
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the LSST License Statement and
# the GNU General Public License along with this program.  If not,
# see <http://www.lsstcorp.org/LegalNotices/>.

"""
Register database and table inside replication service

@author  Fabrice Jammes, IN2P3
"""

# -------------------------------
#  Imports of standard modules --
# -------------------------------
import argparse
import sys

# ----------------------------
# Imports for other modules --
# ----------------------------
import qserv.http as http
import qserv.util as util
from qserv.ingest import Ingester
from qserv.jsonparser import DatabaseStatus
from qserv.metadata import ChunkMetadata
import urllib

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description="Initialize database and "
                                     "table inside Qserv replication service")
    parser.add_argument('--config', help="Configuration file for ingest client", type=argparse.FileType('r'),
                        default="/config/ingest.yaml", action=util.IngestConfigAction)
    parser.add_argument("--felis", type=str,
                        help=" A Felis schema file containing the table schema",
                        action=util.FelisAction)
    parser.add_argument("--verbose", "-v", action="store_true",
                        help="Use debug logging")
    args = parser.parse_args()

    logger = util.get_default_logger(args.verbose)

    chunk_metadata = ChunkMetadata(args.config.path, args.config.servers)
    ingester = Ingester(chunk_metadata, args.config.replication_url)
    database_status = ingester.get_database_status()

    if database_status == DatabaseStatus.NOT_REGISTERED:
        ingester.database_register_and_config(args.felis)
    elif database_status == DatabaseStatus.PUBLISHED:
        sys.exit(1)