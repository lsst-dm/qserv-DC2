#!/usr/bin/env python

# LSST Data Management System
# Copyright 2014-2015 AURA/LSST.
#
# This product includes software developed by the
# LSST Project (http://www.lsst.org/).
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the LSST License Statement and
# the GNU General Public License along with this program.  If not,
# see <http://www.lsstcorp.org/LegalNotices/>.

"""
User-friendly client for Qserv replication service.

@author  Hsin Fang Chiang, Rubin Observatory
@author  Fabrice Jammes, IN2P3
"""

# -------------------------------
#  Imports of standard modules --
# -------------------------------
import argparse
import getpass
import json
import logging
import os
import sys

# ----------------------------
# Imports for other modules --
# ----------------------------
import qserv.ingest as ingest
import requests

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description="A thin python wrapper around Qserv REST web service")

    parser.add_argument("url", type=str, help="Web Service URL")
    parser.add_argument("method", type=str, help="Request type", choices=["post", "put"])
    group = parser.add_mutually_exclusive_group()
    group.add_argument("--data", help="Key-value pairs to pass configs with the request",
                       metavar="KEY=VALUE", nargs="*", action=ingest.DataAction)
    group.add_argument("--json", type=str, help="Json file with the request configs", action=ingest.JsonAction)
    parser.add_argument("--verbose", "-v", action="store_true", help="Use debug logging")
    args = parser.parse_args()

    logger = logging.getLogger()
    if args.verbose:
        logger.setLevel(logging.DEBUG)
    else:
        logger.setLevel(logging.INFO)
    logger.addHandler(logging.StreamHandler())

    payload = args.data or args.json or dict()
    logging.debug("Starting a request: %s with %s", args.url, payload)
    if args.method == "post":
        ingest.post(args.url, payload)
    elif args.method == "put":
        ingest.put(args.url)
